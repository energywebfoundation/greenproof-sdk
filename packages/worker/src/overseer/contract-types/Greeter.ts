/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface GreeterInterface extends utils.Interface {
  functions: {
    "dupa()": FunctionFragment;
    "greet()": FunctionFragment;
    "setGreeting(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dupa"
      | "dupa()"
      | "greet"
      | "greet()"
      | "setGreeting"
      | "setGreeting(string)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "dupa", values?: undefined): string;
  encodeFunctionData(functionFragment: "dupa()", values?: undefined): string;
  encodeFunctionData(functionFragment: "greet", values?: undefined): string;
  encodeFunctionData(functionFragment: "greet()", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGreeting", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGreeting(string)",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "dupa", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dupa()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "greet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "greet()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGreeting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGreeting(string)",
    data: BytesLike
  ): Result;

  events: {
    "Dupa(string)": EventFragment;
    "Greeting(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dupa"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dupa(string)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Greeting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Greeting(string)"): EventFragment;
}

export interface DupaEventObject {
  dupa: string;
}
export type DupaEvent = TypedEvent<[string], DupaEventObject>;

export type DupaEventFilter = TypedEventFilter<DupaEvent>;

export interface GreetingEventObject {
  greeting: string;
}
export type GreetingEvent = TypedEvent<[string], GreetingEventObject>;

export type GreetingEventFilter = TypedEventFilter<GreetingEvent>;

export interface Greeter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GreeterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dupa(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "dupa()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    greet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "greet()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGreeting(
      _greeting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGreeting(string)"(
      _greeting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  dupa(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "dupa()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  greet(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "greet()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGreeting(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGreeting(string)"(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    dupa(overrides?: CallOverrides): Promise<string>;

    "dupa()"(overrides?: CallOverrides): Promise<string>;

    greet(overrides?: CallOverrides): Promise<string>;

    "greet()"(overrides?: CallOverrides): Promise<string>;

    setGreeting(_greeting: string, overrides?: CallOverrides): Promise<void>;

    "setGreeting(string)"(
      _greeting: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Dupa(string)"(dupa?: null): DupaEventFilter;
    Dupa(dupa?: null): DupaEventFilter;

    "Greeting(string)"(greeting?: null): GreetingEventFilter;
    Greeting(greeting?: null): GreetingEventFilter;
  };

  estimateGas: {
    dupa(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "dupa()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    greet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "greet()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGreeting(
      _greeting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGreeting(string)"(
      _greeting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dupa(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "dupa()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    greet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "greet()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGreeting(
      _greeting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGreeting(string)"(
      _greeting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
