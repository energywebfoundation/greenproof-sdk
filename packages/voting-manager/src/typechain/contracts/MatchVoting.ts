/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface MatchVotingInterface extends utils.Interface {
  functions: {
    "addWorker(address)": FunctionFragment;
    "certificateContractAddress()": FunctionFragment;
    "getWinningMatch(string)": FunctionFragment;
    "getWorkerVote(string,address)": FunctionFragment;
    "matchInputToVoting(string)": FunctionFragment;
    "numberOfWorkers()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeWorker(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vote(string,string)": FunctionFragment;
    "workerToIndex(address)": FunctionFragment;
    "workers(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addWorker"
      | "certificateContractAddress"
      | "getWinningMatch"
      | "getWorkerVote"
      | "matchInputToVoting"
      | "numberOfWorkers"
      | "owner"
      | "removeWorker"
      | "renounceOwnership"
      | "transferOwnership"
      | "vote"
      | "workerToIndex"
      | "workers"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addWorker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "certificateContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningMatch",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkerVote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "matchInputToVoting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfWorkers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWorker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "workerToIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "workers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addWorker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "certificateContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchInputToVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workerToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workers", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "WinningMatch(string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinningMatch"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WinningMatchEventObject {
  matchInput: string;
  matchResult: string;
  voteCount: BigNumber;
}
export type WinningMatchEvent = TypedEvent<
  [string, string, BigNumber],
  WinningMatchEventObject
>;

export type WinningMatchEventFilter = TypedEventFilter<WinningMatchEvent>;

export interface MatchVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MatchVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addWorker(
      workerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    certificateContractAddress(overrides?: CallOverrides): Promise<[string]>;

    getWinningMatch(
      matchInput: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getWorkerVote(
      matchInput: string,
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string] & { matchResult: string }>;

    matchInputToVoting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string] & {
        ended: boolean;
        started: boolean;
        winningMatch: string;
      }
    >;

    numberOfWorkers(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeWorker(
      workerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      matchInput: string,
      matchResult: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workerToIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  addWorker(
    workerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  certificateContractAddress(overrides?: CallOverrides): Promise<string>;

  getWinningMatch(
    matchInput: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getWorkerVote(
    matchInput: string,
    workerAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  matchInputToVoting(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, string] & {
      ended: boolean;
      started: boolean;
      winningMatch: string;
    }
  >;

  numberOfWorkers(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeWorker(
    workerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    matchInput: string,
    matchResult: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workerToIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  workers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addWorker(workerAddress: string, overrides?: CallOverrides): Promise<void>;

    certificateContractAddress(overrides?: CallOverrides): Promise<string>;

    getWinningMatch(
      matchInput: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getWorkerVote(
      matchInput: string,
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    matchInputToVoting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string] & {
        ended: boolean;
        started: boolean;
        winningMatch: string;
      }
    >;

    numberOfWorkers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeWorker(
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      matchInput: string,
      matchResult: string,
      overrides?: CallOverrides
    ): Promise<void>;

    workerToIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    workers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "WinningMatch(string,string,uint256)"(
      matchInput?: null,
      matchResult?: null,
      voteCount?: null
    ): WinningMatchEventFilter;
    WinningMatch(
      matchInput?: null,
      matchResult?: null,
      voteCount?: null
    ): WinningMatchEventFilter;
  };

  estimateGas: {
    addWorker(
      workerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    certificateContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getWinningMatch(
      matchInput: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getWorkerVote(
      matchInput: string,
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchInputToVoting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfWorkers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeWorker(
      workerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      matchInput: string,
      matchResult: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workerToIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    workers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addWorker(
      workerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    certificateContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinningMatch(
      matchInput: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getWorkerVote(
      matchInput: string,
      workerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchInputToVoting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfWorkers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWorker(
      workerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      matchInput: string,
      matchResult: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workerToIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
