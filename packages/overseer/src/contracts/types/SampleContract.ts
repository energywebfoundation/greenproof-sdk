/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SampleContractInterface extends utils.Interface {
  functions: {
    "dullFunction()": FunctionFragment;
    "interestingFunction()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "dullFunction" | "interestingFunction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "dullFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestingFunction",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "dullFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestingFunction",
    data: BytesLike
  ): Result;

  events: {
    "CuriousEvent(string,uint32)": EventFragment;
    "DullEvent(string,uint32)": EventFragment;
    "InterestingEvent(string,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CuriousEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DullEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestingEvent"): EventFragment;
}

export interface CuriousEventEventObject {
  message: string;
  value: number;
}
export type CuriousEventEvent = TypedEvent<
  [string, number],
  CuriousEventEventObject
>;

export type CuriousEventEventFilter = TypedEventFilter<CuriousEventEvent>;

export interface DullEventEventObject {
  message: string;
  value: number;
}
export type DullEventEvent = TypedEvent<[string, number], DullEventEventObject>;

export type DullEventEventFilter = TypedEventFilter<DullEventEvent>;

export interface InterestingEventEventObject {
  message: string;
  value: number;
}
export type InterestingEventEvent = TypedEvent<
  [string, number],
  InterestingEventEventObject
>;

export type InterestingEventEventFilter =
  TypedEventFilter<InterestingEventEvent>;

export interface SampleContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SampleContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dullFunction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestingFunction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  dullFunction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestingFunction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    dullFunction(overrides?: CallOverrides): Promise<string>;

    interestingFunction(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CuriousEvent(string,uint32)"(
      message?: null,
      value?: null
    ): CuriousEventEventFilter;
    CuriousEvent(message?: null, value?: null): CuriousEventEventFilter;

    "DullEvent(string,uint32)"(
      message?: null,
      value?: null
    ): DullEventEventFilter;
    DullEvent(message?: null, value?: null): DullEventEventFilter;

    "InterestingEvent(string,uint32)"(
      message?: null,
      value?: null
    ): InterestingEventEventFilter;
    InterestingEvent(message?: null, value?: null): InterestingEventEventFilter;
  };

  estimateGas: {
    dullFunction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestingFunction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dullFunction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestingFunction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
